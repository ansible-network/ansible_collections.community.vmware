- import_role:
    name: prepare_vmware_tests
- name: Create a role without privileges in check mode
  vmware_local_role_manager:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    local_role_name: SampleRole_0001
    validate_certs: false
    state: present
  register: role_creation
  check_mode: true
- name: Verify if role was created
  assert:
    that:
    - role_creation.changed
- name: Create a role without privileges
  vmware_local_role_manager: &id001
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    local_role_name: SampleRole_0001
    validate_certs: false
    state: present
  register: role_creation_0001
- name: Verify if role was created
  assert:
    that:
    - role_creation_0001.changed
- name: Again create a role without privileges
  vmware_local_role_manager: *id001
  register: role_creation_0001
- name: verify if role is not created again
  assert:
    that:
    - not role_creation_0001.changed
- name: Delete a role
  vmware_local_role_manager: &id002
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    local_role_name: SampleRole_0001
    validate_certs: false
    state: absent
  register: role_creation_0001
- name: Verify if role is not present
  assert:
    that:
    - role_creation_0001.changed
- name: Delete role again
  vmware_local_role_manager: *id002
  register: role_creation_0001
- name: Verify if role is absent again
  assert:
    that:
    - not role_creation_0001.changed
- name: Create a role with privileges
  vmware_local_role_manager:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    local_role_name: SampleRole_0001
    validate_certs: false
    local_privilege_ids:
    - VirtualMachine.State.RenameSnapshot
    state: present
  register: role_creation_0001
- name: Verify if role is created with privileges
  assert:
    that:
    - role_creation_0001.changed
- name: Add a privilege to existing privileges
  vmware_local_role_manager: &id003
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    local_role_name: SampleRole_0001
    validate_certs: false
    local_privilege_ids:
    - Folder.Create
    action: add
    state: present
  register: role_add
- name: Verify if role is updated with updated privileges
  assert:
    that:
    - role_add.changed
- name: Again add a privilege to existing privileges
  vmware_local_role_manager: *id003
  register: role_add
- name: Verify if role is not updated
  assert:
    that:
    - not role_add.changed
- name: Remove a privilege from existing privileges
  vmware_local_role_manager: &id004
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    local_role_name: SampleRole_0001
    validate_certs: false
    local_privilege_ids:
    - Folder.Create
    action: remove
  register: role_remove
- name: verify if role is updated with privileges
  assert:
    that:
    - role_remove.changed
- name: Again remove a privilege from existing privileges
  vmware_local_role_manager: *id004
  register: role_remove
- name: Verify if role is not updated
  assert:
    that:
    - not role_remove.changed
- name: Set a privilege to an existing role
  vmware_local_role_manager: &id005
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    local_role_name: SampleRole_0001
    validate_certs: false
    local_privilege_ids:
    - Folder.Create
    action: set
  register: role_set
- name: Verify if role is updated with privileges
  assert:
    that:
    - role_set.changed
- name: Again set a privilege to an existing role
  vmware_local_role_manager: *id005
  register: role_set
- name: verify if role is not updated
  assert:
    that:
    - not role_set.changed
